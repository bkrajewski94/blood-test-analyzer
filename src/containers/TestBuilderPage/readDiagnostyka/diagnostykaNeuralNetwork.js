import { pieChartColors } from "../../../utils/colors";
import { texts } from "../../../utils/texts";

export function liver({ ast, alt }) {
  const F = {
    0: 0.5,
    1: 0.475,
    7: 1.3730500844588017e-15,
    2: -8.013732430540172,
    3: -34.22174179067013,
    4: 5.8824323769300655,
    5: -40.83797212785221,
    6: -41.442501270892826,
    8: 1.3730500844587999e-15,
    26: -24.577186476741193,
    14: 0.9275091927285269,
    9: -12.710228190942235,
    10: 2.549042948164315,
    11: -20.778092211861193,
    12: 24.07121922525684,
    13: 23.771632731362292,
    15: 0.0672358901326032,
    27: 15.637432048032906,
    21: 0.000651921396541232,
    16: -8.845149753625124,
    17: -7.334934426767657,
    18: -9.642745751399353,
    19: 2.3936233078081877,
    20: 2.338946675216005,
    22: 0.0006514963950339638,
    28: 4.450836440987552,
    29: 0.9999994982873793,
    23: -0.0089669087433023,
    24: 14.505237848086589,
    25: -0.0015257226399602562,
    30: 5.017123689552263e-7
  };
  F[0] = ast;
  F[1] = alt;
  F[2] = F[3];
  F[3] = F[4];
  F[3] += F[0] * F[5];
  F[3] += F[1] * F[6];
  F[7] = 1 / (1 + Math.exp(-F[3]));
  F[8] = F[7] * (1 - F[7]);
  F[9] = F[10];
  F[10] = F[11];
  F[10] += F[0] * F[12];
  F[10] += F[1] * F[13];
  F[14] = 1 / (1 + Math.exp(-F[10]));
  F[15] = F[14] * (1 - F[14]);
  F[16] = F[17];
  F[17] = F[18];
  F[17] += F[0] * F[19];
  F[17] += F[1] * F[20];
  F[21] = 1 / (1 + Math.exp(-F[17]));
  F[22] = F[21] * (1 - F[21]);
  F[23] = F[24];
  F[24] = F[25];
  F[24] += F[7] * F[26];
  F[24] += F[14] * F[27];
  F[24] += F[21] * F[28];
  F[29] = 1 / (1 + Math.exp(-F[24]));
  F[30] = F[29] * (1 - F[29]);
  const output = {
    value: F[29],
    ranges: [
      {
        description: texts.test.healthy,
        expectedValue: 0,
        color: pieChartColors.green
      },
      {
        description: texts.test.liverModerate,
        expectedValue: 0.5,
        color: pieChartColors.yellow
      },
      {
        description: texts.test.liverAcute,
        expectedValue: 1,
        color: pieChartColors.red
      }
    ]
  };

  return output;
}

export function thyriod({ tsh, ft3, ft4 }) {
  const F = {
    0: 0.024069402875636418,
    1: 0.6943268777382527,
    2: 0.23154542179822935,
    9: 0.5757748380110839,
    3: 2.025970664291073,
    4: 0.30545232133585964,
    5: 2.535334027127726,
    6: 1.8204788774414549,
    7: -2.4884926199092896,
    8: -2.3575168521440997,
    10: 0.244258173924394,
    38: 3.6178034256155076,
    17: 0.998941148703145,
    11: 5.751764508073443,
    12: 6.849511228402667,
    13: 4.6176765780087905,
    14: -0.2798860856144923,
    15: 1.8173206155994397,
    16: 4.218424121214821,
    18: 0.0010577301307861608,
    39: 3.0047379100937848,
    25: 0.9999999992406507,
    19: 6.427500361362693,
    20: 20.99855924785261,
    21: 4.92427356566052,
    22: -18.90077905196979,
    23: 19.257118664685795,
    24: 13.640870316681758,
    26: 7.593492495690354e-10,
    40: 16.02126910687971,
    33: 0.01108759627439767,
    27: 10.427844508680197,
    28: -4.490778726404178,
    29: 13.954195161994525,
    30: 17.22523131232619,
    31: -20.182535429230988,
    32: -20.930226447607765,
    34: 0.010964661483253632,
    41: -19.674418883646084,
    42: 0.9999999900661399,
    35: 0.05432882166520159,
    36: 18.427316701965058,
    37: -2.4604068992074732,
    43: 9.933859969186208e-9
  };
  F[0] = tsh;
  F[1] = ft3;
  F[2] = ft4;
  F[3] = F[4];
  F[4] = F[5];
  F[4] += F[0] * F[6];
  F[4] += F[1] * F[7];
  F[4] += F[2] * F[8];
  F[9] = 1 / (1 + Math.exp(-F[4]));
  F[10] = F[9] * (1 - F[9]);
  F[11] = F[12];
  F[12] = F[13];
  F[12] += F[0] * F[14];
  F[12] += F[1] * F[15];
  F[12] += F[2] * F[16];
  F[17] = 1 / (1 + Math.exp(-F[12]));
  F[18] = F[17] * (1 - F[17]);
  F[19] = F[20];
  F[20] = F[21];
  F[20] += F[0] * F[22];
  F[20] += F[1] * F[23];
  F[20] += F[2] * F[24];
  F[25] = 1 / (1 + Math.exp(-F[20]));
  F[26] = F[25] * (1 - F[25]);
  F[27] = F[28];
  F[28] = F[29];
  F[28] += F[0] * F[30];
  F[28] += F[1] * F[31];
  F[28] += F[2] * F[32];
  F[33] = 1 / (1 + Math.exp(-F[28]));
  F[34] = F[33] * (1 - F[33]);
  F[35] = F[36];
  F[36] = F[37];
  F[36] += F[9] * F[38];
  F[36] += F[17] * F[39];
  F[36] += F[25] * F[40];
  F[36] += F[33] * F[41];
  F[42] = 1 / (1 + Math.exp(-F[36]));
  F[43] = F[42] * (1 - F[42]);
  const output = {
    value: F[42],
    ranges: [
      {
        description: texts.test.hypothyroidism,
        expectedValue: 0,
        color: pieChartColors.yellow
      },
      {
        description: texts.test.healthy,
        expectedValue: 0.5,
        color: pieChartColors.green
      },
      {
        description: texts.test.hyperthyroidism,
        expectedValue: 1,
        color: pieChartColors.orange
      }
    ]
  };

  return output;
}

export function wbc({ leukocyty, limfocyty, neutrofile }) {
  const F = {
    0: 0.31581641900116403,
    1: 0.07674593695307605,
    2: 0.10158873264046138,
    9: 0.3223492939117021,
    3: 7.776738815075028,
    4: -0.742996251113196,
    5: -10.782231963415569,
    6: 17.178067046290906,
    7: 36.752834524371366,
    8: 17.654411539050834,
    10: 0.2184402266263292,
    38: 23.003476388726565,
    17: 0.5423153428516344,
    11: -1.1372757074623543,
    12: 0.16966722016698754,
    13: -4.508853348570816,
    14: 13.98929324215956,
    15: -14.573982624122577,
    16: 13.574005488199568,
    18: 0.24820941175934863,
    39: 2.5820930390320793,
    25: 0.9999999837509075,
    19: 13.218683043360322,
    20: 17.935228764977886,
    21: 24.70721984210589,
    22: -12.368656429452406,
    23: -18.18855249696144,
    24: -14.468817105192116,
    26: 1.6249092251930063e-8,
    40: -19.345969861376062,
    33: 0.5763784637081985,
    27: 0.2629802622223265,
    28: 0.30792404643945315,
    29: 2.8860539863032852,
    30: -6.832013514433445,
    31: 3.4289664324688944,
    32: -6.729359911588445,
    34: 0.24416633028157542,
    41: 1.6204479859707057,
    42: 2.2993321944413288e-7,
    35: -0.487704793855834,
    36: -15.285476690492663,
    37: -5.688961544968109,
    43: 2.2993316657484748e-7
  };
  F[0] = leukocyty;
  F[1] = limfocyty;
  F[2] = neutrofile;
  F[3] = F[4];
  F[4] = F[5];
  F[4] += F[0] * F[6];
  F[4] += F[1] * F[7];
  F[4] += F[2] * F[8];
  F[9] = 1 / (1 + Math.exp(-F[4]));
  F[10] = F[9] * (1 - F[9]);
  F[11] = F[12];
  F[12] = F[13];
  F[12] += F[0] * F[14];
  F[12] += F[1] * F[15];
  F[12] += F[2] * F[16];
  F[17] = 1 / (1 + Math.exp(-F[12]));
  F[18] = F[17] * (1 - F[17]);
  F[19] = F[20];
  F[20] = F[21];
  F[20] += F[0] * F[22];
  F[20] += F[1] * F[23];
  F[20] += F[2] * F[24];
  F[25] = 1 / (1 + Math.exp(-F[20]));
  F[26] = F[25] * (1 - F[25]);
  F[27] = F[28];
  F[28] = F[29];
  F[28] += F[0] * F[30];
  F[28] += F[1] * F[31];
  F[28] += F[2] * F[32];
  F[33] = 1 / (1 + Math.exp(-F[28]));
  F[34] = F[33] * (1 - F[33]);
  F[35] = F[36];
  F[36] = F[37];
  F[36] += F[9] * F[38];
  F[36] += F[17] * F[39];
  F[36] += F[25] * F[40];
  F[36] += F[33] * F[41];
  F[42] = 1 / (1 + Math.exp(-F[36]));
  F[43] = F[42] * (1 - F[42]);
  const output = {
    value: F[42],
    ranges: [
      {
        description: texts.test.wbcSevere,
        expectedValue: 0,
        color: pieChartColors.red
      },
      {
        description: texts.test.wbcModerate,
        expectedValue: 0.33,
        color: pieChartColors.yellow
      },
      {
        description: texts.test.healthy,
        expectedValue: 0.66,
        color: pieChartColors.green
      },
      {
        description: texts.test.wbcAcute,
        expectedValue: 1,
        color: pieChartColors.blue
      }
    ]
  };

  return output;
}

export function hashimoto({ aTpo, aTg }) {
  const F = {
    0: 0.3764896487646765,
    1: 0.7823406388466958,
    7: 2.467240065181568e-7,
    2: 0.36659465853558626,
    3: -15.21499526084925,
    4: 1.206121077992413,
    5: -14.037867306780424,
    6: -14.234214681117864,
    8: 2.4672394564542136e-7,
    26: -20.015028005210095,
    14: 0.9999999985127639,
    9: -0.5235032975621801,
    10: 20.326346358974117,
    11: -1.6468310032421623,
    12: 18.786100670548066,
    13: 19.045929840829356,
    15: 1.4872361098291748e-9,
    27: 27.47119814271065,
    21: 0.000019737379041575566,
    16: 0.22140948923701265,
    17: -10.832976569183359,
    18: 0.8171311533269973,
    19: -9.954579867489194,
    20: -10.100857672750825,
    22: 0.000019736989477444135,
    28: -14.048889985180788,
    29: 0.9999999999988425,
    23: -9.386426775193716,
    24: 27.484798390514108,
    25: 0.013882515114321226,
    30: 1.1575185254728483e-12
  };
  F[0] = aTpo;
  F[1] = aTg;
  F[2] = F[3];
  F[3] = F[4];
  F[3] += F[0] * F[5];
  F[3] += F[1] * F[6];
  F[7] = 1 / (1 + Math.exp(-F[3]));
  F[8] = F[7] * (1 - F[7]);
  F[9] = F[10];
  F[10] = F[11];
  F[10] += F[0] * F[12];
  F[10] += F[1] * F[13];
  F[14] = 1 / (1 + Math.exp(-F[10]));
  F[15] = F[14] * (1 - F[14]);
  F[16] = F[17];
  F[17] = F[18];
  F[17] += F[0] * F[19];
  F[17] += F[1] * F[20];
  F[21] = 1 / (1 + Math.exp(-F[17]));
  F[22] = F[21] * (1 - F[21]);
  F[23] = F[24];
  F[24] = F[25];
  F[24] += F[7] * F[26];
  F[24] += F[14] * F[27];
  F[24] += F[21] * F[28];
  F[29] = 1 / (1 + Math.exp(-F[24]));
  F[30] = F[29] * (1 - F[29]);

  const output = {
    value: F[29],
    ranges: [
      {
        description: texts.test.healthy,
        expectedValue: 0,
        color: pieChartColors.green
      },
      {
        description: texts.test.hashimotoActive,
        expectedValue: 1,
        color: pieChartColors.red
      }
    ]
  };

  return output;
}

export function rbc({ erytrocyty, hematokryt, mcv }) {
  const F = {
    0: 0.04369923578828841,
    1: 0.36043457832841436,
    2: 0.75,
    9: 1.0547509578773361e-10,
    3: -23.04640233070442,
    4: -22.972546249657277,
    5: -70.24411101160848,
    6: 131.0336639710178,
    7: 114.72760887672865,
    8: 0.25826194102144684,
    10: 1.0547509577660861e-10,
    38: 52.573048710720954,
    17: 1.7115647659883332e-14,
    11: -1.5145032520591144,
    12: -31.69878328199195,
    13: -149.60609035569985,
    14: -72.84273059615929,
    15: -11.610216107659301,
    16: 167.0336027740776,
    18: 1.711564765988304e-14,
    39: -56.54357184444487,
    25: 0.9938868697142195,
    19: -12.587839233498826,
    20: 5.091184423291395,
    21: 89.20863417090267,
    22: 26.727800471242315,
    23: -33.17409968658072,
    24: -97.77112447867904,
    26: 0.0060757599238896055,
    40: 1.2271091626685156,
    33: 0.0007903239152235831,
    27: -6.110113003971469,
    28: -7.1422770408819645,
    29: -68.88862341498483,
    30: 164.01228997170907,
    31: 137.68534535473134,
    32: 6.603433078415761,
    34: 0.0007896993033326087,
    41: 2.315878715359697,
    42: 0.5056631671416716,
    35: -11.387032869420533,
    36: 0.02265363731352146,
    37: -1.1990657797988646,
    43: 0.2499679285379255
  };
  F[0] = erytrocyty;
  F[1] = hematokryt;
  F[2] = mcv;
  F[3] = F[4];
  F[4] = F[5];
  F[4] += F[0] * F[6];
  F[4] += F[1] * F[7];
  F[4] += F[2] * F[8];
  F[9] = 1 / (1 + Math.exp(-F[4]));
  F[10] = F[9] * (1 - F[9]);
  F[11] = F[12];
  F[12] = F[13];
  F[12] += F[0] * F[14];
  F[12] += F[1] * F[15];
  F[12] += F[2] * F[16];
  F[17] = 1 / (1 + Math.exp(-F[12]));
  F[18] = F[17] * (1 - F[17]);
  F[19] = F[20];
  F[20] = F[21];
  F[20] += F[0] * F[22];
  F[20] += F[1] * F[23];
  F[20] += F[2] * F[24];
  F[25] = 1 / (1 + Math.exp(-F[20]));
  F[26] = F[25] * (1 - F[25]);
  F[27] = F[28];
  F[28] = F[29];
  F[28] += F[0] * F[30];
  F[28] += F[1] * F[31];
  F[28] += F[2] * F[32];
  F[33] = 1 / (1 + Math.exp(-F[28]));
  F[34] = F[33] * (1 - F[33]);
  F[35] = F[36];
  F[36] = F[37];
  F[36] += F[9] * F[38];
  F[36] += F[17] * F[39];
  F[36] += F[25] * F[40];
  F[36] += F[33] * F[41];
  F[42] = 1 / (1 + Math.exp(-F[36]));
  F[43] = F[42] * (1 - F[42]);
  const output = {
    value: F[42],
    ranges: [
      {
        description: texts.test.anemiaB,
        expectedValue: 0,
        color: pieChartColors.yellow
      },
      {
        description: texts.test.anemiaAll,
        expectedValue: 0.25,
        color: pieChartColors.red
      },
      {
        description: texts.test.anemiaFe,
        expectedValue: 0.5,
        color: pieChartColors.orange
      },
      {
        description: texts.test.healthy,
        expectedValue: 0.75,
        color: pieChartColors.green
      },
      {
        description: texts.test.rbcHigh,
        expectedValue: 1,
        color: pieChartColors.blue
      }
    ]
  };

  return output;
}

export function glucoze({ glukoza, insulina }) {
  const F = {
    0: 0.585,
    1: 0.09,
    7: 0.989131473251075,
    2: 2.190520905310657,
    3: 4.510956100059566,
    4: -0.11109443985956217,
    5: 9.16830330838211,
    6: -8.237854394270679,
    8: 0.010750401875232924,
    26: 6.478695878543326,
    14: 0.612364860831261,
    9: -3.684056660965913,
    10: 0.4572637484603099,
    11: -9.208827672370079,
    12: 9.183197922227642,
    13: 47.710229292605014,
    15: 0.23737413805037136,
    27: 45.85065409022572,
    21: 0.0969783731962854,
    16: -5.023062747153499,
    17: -2.2312585061734245,
    18: -6.806080654064199,
    19: 15.987627484969583,
    20: -53.08822145353658,
    22: 0.08757356832848738,
    28: -31.985297296644255,
    29: 0.9999999999917997,
    23: 0.8896942615039115,
    24: 25.526856848507745,
    25: -5.856872463535575,
    30: 8.200329304419086e-12
  };
  F[0] = glukoza;
  F[1] = insulina;
  F[2] = F[3];
  F[3] = F[4];
  F[3] += F[0] * F[5];
  F[3] += F[1] * F[6];
  F[7] = 1 / (1 + Math.exp(-F[3]));
  F[8] = F[7] * (1 - F[7]);
  F[9] = F[10];
  F[10] = F[11];
  F[10] += F[0] * F[12];
  F[10] += F[1] * F[13];
  F[14] = 1 / (1 + Math.exp(-F[10]));
  F[15] = F[14] * (1 - F[14]);
  F[16] = F[17];
  F[17] = F[18];
  F[17] += F[0] * F[19];
  F[17] += F[1] * F[20];
  F[21] = 1 / (1 + Math.exp(-F[17]));
  F[22] = F[21] * (1 - F[21]);
  F[23] = F[24];
  F[24] = F[25];
  F[24] += F[7] * F[26];
  F[24] += F[14] * F[27];
  F[24] += F[21] * F[28];
  F[29] = 1 / (1 + Math.exp(-F[24]));
  F[30] = F[29] * (1 - F[29]);
  const output = {
    value: F[29],
    ranges: [
      {
        description: texts.test.diabetesType1,
        expectedValue: 0,
        color: pieChartColors.red
      },
      {
        description: texts.test.healthy,
        expectedValue: 0.33,
        color: pieChartColors.green
      },
      {
        description: texts.test.insulinResistance,
        expectedValue: 0.66,
        color: pieChartColors.yellow
      },
      {
        description: texts.test.diabetesType2,
        expectedValue: 1,
        color: pieChartColors.orange
      }
    ]
  };

  return output;
}

export function allergy({ eozynofile, bazofile }) {
  const F = {
    0: 0.5396512917430657,
    1: 0.3454871270488753,
    7: 0.9988015375913378,
    2: -4.011932052111323,
    3: 6.72551668876419,
    4: -10.416567140565524,
    5: 12.855779771416486,
    6: 29.536399102583157,
    8: 0.0011970260965171945,
    26: 26.77761492784468,
    14: 0.9997105629580915,
    9: -7.353316536406525,
    10: 8.147283277483206,
    11: -11.273047819352962,
    12: -4.934115065735292,
    13: 63.918539756606044,
    15: 0.0002893532681073069,
    27: 51.40843283440367,
    21: 0.9991646360791709,
    16: 15.93114585651249,
    17: 7.086807381701213,
    18: 31.070835732143685,
    19: -54.099852718991364,
    20: 15.083129426508647,
    22: 0.0008346660879488346,
    28: -45.55266848112418,
    29: 1,
    23: -37.621205784658386,
    24: 40.046997161049084,
    25: 7.4225362937916985,
    30: 0
  };
  F[0] = eozynofile;
  F[1] = bazofile;
  F[2] = F[3];
  F[3] = F[4];
  F[3] += F[0] * F[5];
  F[3] += F[1] * F[6];
  F[7] = 1 / (1 + Math.exp(-F[3]));
  F[8] = F[7] * (1 - F[7]);
  F[9] = F[10];
  F[10] = F[11];
  F[10] += F[0] * F[12];
  F[10] += F[1] * F[13];
  F[14] = 1 / (1 + Math.exp(-F[10]));
  F[15] = F[14] * (1 - F[14]);
  F[16] = F[17];
  F[17] = F[18];
  F[17] += F[0] * F[19];
  F[17] += F[1] * F[20];
  F[21] = 1 / (1 + Math.exp(-F[17]));
  F[22] = F[21] * (1 - F[21]);
  F[23] = F[24];
  F[24] = F[25];
  F[24] += F[7] * F[26];
  F[24] += F[14] * F[27];
  F[24] += F[21] * F[28];
  F[29] = 1 / (1 + Math.exp(-F[24]));
  F[30] = F[29] * (1 - F[29]);

  const output = {
    value: F[29],
    ranges: [
      {
        description: texts.test.healthy,
        expectedValue: 0,
        color: pieChartColors.green
      },
      {
        description: texts.test.allergyActive,
        expectedValue: 1,
        color: pieChartColors.orange
      }
    ]
  };

  return output;
}
